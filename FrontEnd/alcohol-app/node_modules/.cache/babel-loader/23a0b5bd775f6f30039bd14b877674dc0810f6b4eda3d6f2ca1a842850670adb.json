{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar startNativeAnimationNextId = 1; // Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\n\nclass Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n  stop() {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n  __getNativeAnimationConfig() {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  } // Helper function for subclasses to make sure onEnd is only called once.\n\n  __debouncedOnEnd(result) {\n    var onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n  __startNativeAnimation(animatedValue) {\n    var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n    try {\n      animatedValue.__makeNative();\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n}\nexport default Animation;","map":{"version":3,"names":["NativeAnimatedHelper","startNativeAnimationNextId","Animation","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","stop","__nativeId","API","stopAnimation","__getNativeAnimationConfig","Error","__debouncedOnEnd","result","__onEnd","__startNativeAnimation","startNativeAnimationWaitId","setWaitingForIdentifier","__makeNative","generateNewAnimationId","startAnimatingNode","__getNativeTag","bind","e","unsetWaitingForIdentifier"],"sources":["C:/Users/dlfrn/Downloads/myToyProj/toyProject/FrontEnd/alcohol-app/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/Animation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar startNativeAnimationNextId = 1; // Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\n\nclass Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n\n  stop() {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n\n  __getNativeAnimationConfig() {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  } // Helper function for subclasses to make sure onEnd is only called once.\n\n\n  __debouncedOnEnd(result) {\n    var onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n\n  __startNativeAnimation(animatedValue) {\n    var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n\n    try {\n      animatedValue.__makeNative();\n\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n\n}\n\nexport default Animation;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,OAAOA,oBAAoB,MAAM,yBAAyB;AAC1D,IAAIC,0BAA0B,GAAG,CAAC,CAAC,CAAC;AACpC;AACA;;AAEA,MAAMC,SAAS,CAAC;EACdC,KAAKA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,aAAa,EAAE,CAAC;EAErEC,IAAIA,CAAA,EAAG;IACL,IAAI,IAAI,CAACC,UAAU,EAAE;MACnBV,oBAAoB,CAACW,GAAG,CAACC,aAAa,CAAC,IAAI,CAACF,UAAU,CAAC;IACzD;EACF;EAEAG,0BAA0BA,CAAA,EAAG;IAC3B;IACA;IACA,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;EACtE,CAAC,CAAC;;EAGFC,gBAAgBA,CAACC,MAAM,EAAE;IACvB,IAAIV,KAAK,GAAG,IAAI,CAACW,OAAO;IACxB,IAAI,CAACA,OAAO,GAAG,IAAI;IACnBX,KAAK,IAAIA,KAAK,CAACU,MAAM,CAAC;EACxB;EAEAE,sBAAsBA,CAACV,aAAa,EAAE;IACpC,IAAIW,0BAA0B,GAAGlB,0BAA0B,GAAG,iBAAiB;IAC/EA,0BAA0B,IAAI,CAAC;IAC/BD,oBAAoB,CAACW,GAAG,CAACS,uBAAuB,CAACD,0BAA0B,CAAC;IAE5E,IAAI;MACFX,aAAa,CAACa,YAAY,CAAC,CAAC;MAE5B,IAAI,CAACX,UAAU,GAAGV,oBAAoB,CAACsB,sBAAsB,CAAC,CAAC;MAC/DtB,oBAAoB,CAACW,GAAG,CAACY,kBAAkB,CAAC,IAAI,CAACb,UAAU,EAAEF,aAAa,CAACgB,cAAc,CAAC,CAAC,EAAE,IAAI,CAACX,0BAA0B,CAAC,CAAC,EAAE,IAAI,CAACE,gBAAgB,CAACU,IAAI,CAAC,IAAI,CAAC,CAAC;IACnK,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV,MAAMA,CAAC;IACT,CAAC,SAAS;MACR1B,oBAAoB,CAACW,GAAG,CAACgB,yBAAyB,CAACR,0BAA0B,CAAC;IAChF;EACF;AAEF;AAEA,eAAejB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}