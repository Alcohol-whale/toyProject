{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\n\nclass Info {\n  constructor() {\n    this.any_blank_count = 0;\n    this.any_blank_ms = 0;\n    this.any_blank_speed_sum = 0;\n    this.mostly_blank_count = 0;\n    this.mostly_blank_ms = 0;\n    this.pixels_blank = 0;\n    this.pixels_sampled = 0;\n    this.pixels_scrolled = 0;\n    this.total_time_spent = 0;\n    this.sample_count = 0;\n  }\n\n}\n\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\n\nvar _sampleRate = DEBUG ? 1 : null;\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\n\n\nclass FillRateHelper {\n  static addListener(callback) {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n\n    _listeners.push(callback);\n\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      }\n    };\n  }\n\n  static setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(getFrameMetrics) {\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n\n    var start = this._samplesStartTime; // const for flow\n\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n\n      return;\n    }\n\n    var total_time_spent = global.performance.now() - start;\n\n    var info = _objectSpread(_objectSpread({}, this._info), {}, {\n      total_time_spent\n    });\n\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n\n      for (var key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived,\n        info\n      });\n    }\n\n    _listeners.forEach(listener => listener(info));\n\n    this._resetData();\n  }\n\n  computeBlankness(props, state, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {\n      return 0;\n    }\n\n    var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength; // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n\n    var now = global.performance.now();\n\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n\n    this._anyBlankStartTime = null;\n\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n\n    this._mostlyBlankStartTime = null;\n    var blankTop = 0;\n    var first = state.first;\n\n    var firstFrame = this._getFrameMetrics(first);\n\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    } // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n\n\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n\n    var blankBottom = 0;\n    var last = state.last;\n\n    var lastFrame = this._getFrameMetrics(last);\n\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    } // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n\n\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n\n    return blankness;\n  }\n\n  enabled() {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n\n}\n\nexport default FillRateHelper;","map":{"version":3,"names":["_objectSpread","Info","constructor","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","addListener","callback","console","warn","push","remove","filter","listener","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","activate","debug","global","performance","now","deactivateAndFlush","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","computeBlankness","props","state","scrollMetrics","getItemCount","data","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","first","firstFrame","last","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","enabled"],"sources":["/Users/ilkwon_choi/Downloads/Alcohol/FrontEnd/alcohol-app/node_modules/react-native-web/dist/vendor/react-native/FillRateHelper/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\n\nclass Info {\n  constructor() {\n    this.any_blank_count = 0;\n    this.any_blank_ms = 0;\n    this.any_blank_speed_sum = 0;\n    this.mostly_blank_count = 0;\n    this.mostly_blank_ms = 0;\n    this.pixels_blank = 0;\n    this.pixels_sampled = 0;\n    this.pixels_scrolled = 0;\n    this.total_time_spent = 0;\n    this.sample_count = 0;\n  }\n\n}\n\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\n\nvar _sampleRate = DEBUG ? 1 : null;\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\n\n\nclass FillRateHelper {\n  static addListener(callback) {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n\n    _listeners.push(callback);\n\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      }\n    };\n  }\n\n  static setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(getFrameMetrics) {\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n\n    var start = this._samplesStartTime; // const for flow\n\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n\n      return;\n    }\n\n    var total_time_spent = global.performance.now() - start;\n\n    var info = _objectSpread(_objectSpread({}, this._info), {}, {\n      total_time_spent\n    });\n\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n\n      for (var key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived,\n        info\n      });\n    }\n\n    _listeners.forEach(listener => listener(info));\n\n    this._resetData();\n  }\n\n  computeBlankness(props, state, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {\n      return 0;\n    }\n\n    var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength; // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n\n    var now = global.performance.now();\n\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n\n    this._anyBlankStartTime = null;\n\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n\n    this._mostlyBlankStartTime = null;\n    var blankTop = 0;\n    var first = state.first;\n\n    var firstFrame = this._getFrameMetrics(first);\n\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    } // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n\n\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n\n    var blankBottom = 0;\n    var last = state.last;\n\n    var lastFrame = this._getFrameMetrics(last);\n\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    } // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n\n\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n\n    return blankness;\n  }\n\n  enabled() {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n\n}\n\nexport default FillRateHelper;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,aAAP,MAA0B,sCAA1B;;AAEA,MAAMC,IAAN,CAAW;EACTC,WAAW,GAAG;IACZ,KAAKC,eAAL,GAAuB,CAAvB;IACA,KAAKC,YAAL,GAAoB,CAApB;IACA,KAAKC,mBAAL,GAA2B,CAA3B;IACA,KAAKC,kBAAL,GAA0B,CAA1B;IACA,KAAKC,eAAL,GAAuB,CAAvB;IACA,KAAKC,YAAL,GAAoB,CAApB;IACA,KAAKC,cAAL,GAAsB,CAAtB;IACA,KAAKC,eAAL,GAAuB,CAAvB;IACA,KAAKC,gBAAL,GAAwB,CAAxB;IACA,KAAKC,YAAL,GAAoB,CAApB;EACD;;AAZQ;;AAgBX,IAAIC,KAAK,GAAG,KAAZ;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,eAAe,GAAG,EAAtB;;AAEA,IAAIC,WAAW,GAAGH,KAAK,GAAG,CAAH,GAAO,IAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMI,cAAN,CAAqB;EACD,OAAXC,WAAW,CAACC,QAAD,EAAW;IAC3B,IAAIH,WAAW,KAAK,IAApB,EAA0B;MACxBI,OAAO,CAACC,IAAR,CAAa,2DAAb;IACD;;IAEDP,UAAU,CAACQ,IAAX,CAAgBH,QAAhB;;IAEA,OAAO;MACLI,MAAM,EAAE,MAAM;QACZT,UAAU,GAAGA,UAAU,CAACU,MAAX,CAAkBC,QAAQ,IAAIN,QAAQ,KAAKM,QAA3C,CAAb;MACD;IAHI,CAAP;EAKD;;EAEmB,OAAbC,aAAa,CAACC,UAAD,EAAa;IAC/BX,WAAW,GAAGW,UAAd;EACD;;EAEuB,OAAjBC,iBAAiB,CAACC,cAAD,EAAiB;IACvCd,eAAe,GAAGc,cAAlB;EACD;;EAED3B,WAAW,CAAC4B,eAAD,EAAkB;IAC3B,KAAKC,kBAAL,GAA0B,IAA1B;IACA,KAAKC,QAAL,GAAgB,KAAhB;IACA,KAAKC,KAAL,GAAa,IAAIhC,IAAJ,EAAb;IACA,KAAKiC,qBAAL,GAA6B,IAA7B;IACA,KAAKC,iBAAL,GAAyB,IAAzB;IACA,KAAKC,gBAAL,GAAwBN,eAAxB;IACA,KAAKE,QAAL,GAAgB,CAAChB,WAAW,IAAI,CAAhB,IAAqBqB,IAAI,CAACC,MAAL,EAArC;;IAEA,KAAKC,UAAL;EACD;;EAEDC,QAAQ,GAAG;IACT,IAAI,KAAKR,QAAL,IAAiB,KAAKG,iBAAL,IAA0B,IAA/C,EAAqD;MACnDtB,KAAK,IAAIO,OAAO,CAACqB,KAAR,CAAc,0BAAd,CAAT;MACA,KAAKN,iBAAL,GAAyBO,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAzB;IACD;EACF;;EAEDC,kBAAkB,GAAG;IACnB,IAAI,CAAC,KAAKb,QAAV,EAAoB;MAClB;IACD;;IAED,IAAIc,KAAK,GAAG,KAAKX,iBAAjB,CALmB,CAKiB;;IAEpC,IAAIW,KAAK,IAAI,IAAb,EAAmB;MACjBjC,KAAK,IAAIO,OAAO,CAACqB,KAAR,CAAc,uDAAd,CAAT;MACA;IACD;;IAED,IAAI,KAAKR,KAAL,CAAWrB,YAAX,GAA0BG,eAA9B,EAA+C;MAC7C;MACA,KAAKwB,UAAL;;MAEA;IACD;;IAED,IAAI5B,gBAAgB,GAAG+B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,KAA2BE,KAAlD;;IAEA,IAAIC,IAAI,GAAG/C,aAAa,CAACA,aAAa,CAAC,EAAD,EAAK,KAAKiC,KAAV,CAAd,EAAgC,EAAhC,EAAoC;MAC1DtB;IAD0D,CAApC,CAAxB;;IAIA,IAAIE,KAAJ,EAAW;MACT,IAAImC,OAAO,GAAG;QACZC,aAAa,EAAE,KAAKhB,KAAL,CAAWzB,YAAX,GAA0B,KAAKyB,KAAL,CAAWxB,cADxC;QAEZyC,SAAS,EAAE,KAAKjB,KAAL,CAAWvB,eAAX,IAA8BC,gBAAgB,GAAG,IAAjD,CAFC;QAGZwC,wBAAwB,EAAE,KAAKlB,KAAL,CAAW5B,mBAAX,GAAiC,KAAK4B,KAAL,CAAW9B,eAH1D;QAIZiD,iBAAiB,EAAE,KAAKnB,KAAL,CAAW9B,eAAX,IAA8BQ,gBAAgB,GAAG,IAAnB,GAA0B,EAAxD,CAJP;QAKZ0C,mBAAmB,EAAE,KAAKpB,KAAL,CAAW7B,YAAX,GAA0BO,gBALnC;QAMZ2C,oBAAoB,EAAE,KAAKrB,KAAL,CAAW3B,kBAAX,IAAiCK,gBAAgB,GAAG,IAAnB,GAA0B,EAA3D,CANV;QAOZ4C,sBAAsB,EAAE,KAAKtB,KAAL,CAAW1B,eAAX,GAA6BI;MAPzC,CAAd;;MAUA,KAAK,IAAI6C,GAAT,IAAgBR,OAAhB,EAAyB;QACvBA,OAAO,CAACQ,GAAD,CAAP,GAAenB,IAAI,CAACoB,KAAL,CAAW,OAAOT,OAAO,CAACQ,GAAD,CAAzB,IAAkC,IAAjD;MACD;;MAEDpC,OAAO,CAACqB,KAAR,CAAc,qCAAd,EAAqD;QACnDO,OADmD;QAEnDD;MAFmD,CAArD;IAID;;IAEDjC,UAAU,CAAC4C,OAAX,CAAmBjC,QAAQ,IAAIA,QAAQ,CAACsB,IAAD,CAAvC;;IAEA,KAAKR,UAAL;EACD;;EAEDoB,gBAAgB,CAACC,KAAD,EAAQC,KAAR,EAAeC,aAAf,EAA8B;IAC5C,IAAI,CAAC,KAAK9B,QAAN,IAAkB4B,KAAK,CAACG,YAAN,CAAmBH,KAAK,CAACI,IAAzB,MAAmC,CAArD,IAA0D,KAAK7B,iBAAL,IAA0B,IAAxF,EAA8F;MAC5F,OAAO,CAAP;IACD;;IAED,IAAI8B,OAAO,GAAGH,aAAa,CAACG,OAA5B;IAAA,IACIC,MAAM,GAAGJ,aAAa,CAACI,MAD3B;IAAA,IAEIC,QAAQ,GAAGL,aAAa,CAACK,QAF7B;IAAA,IAGIC,aAAa,GAAGN,aAAa,CAACM,aAHlC,CAL4C,CAQK;IACjD;;IAEA,KAAKnC,KAAL,CAAWrB,YAAX;IACA,KAAKqB,KAAL,CAAWxB,cAAX,IAA6B4B,IAAI,CAACoB,KAAL,CAAWW,aAAX,CAA7B;IACA,KAAKnC,KAAL,CAAWvB,eAAX,IAA8B2B,IAAI,CAACoB,KAAL,CAAWpB,IAAI,CAACgC,GAAL,CAASJ,OAAT,CAAX,CAA9B;IACA,IAAIK,WAAW,GAAGjC,IAAI,CAACoB,KAAL,CAAWpB,IAAI,CAACgC,GAAL,CAASF,QAAT,IAAqB,IAAhC,CAAlB,CAd4C,CAca;IACzD;;IAEA,IAAIvB,GAAG,GAAGF,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAV;;IAEA,IAAI,KAAKb,kBAAL,IAA2B,IAA/B,EAAqC;MACnC,KAAKE,KAAL,CAAW7B,YAAX,IAA2BwC,GAAG,GAAG,KAAKb,kBAAtC;IACD;;IAED,KAAKA,kBAAL,GAA0B,IAA1B;;IAEA,IAAI,KAAKG,qBAAL,IAA8B,IAAlC,EAAwC;MACtC,KAAKD,KAAL,CAAW1B,eAAX,IAA8BqC,GAAG,GAAG,KAAKV,qBAAzC;IACD;;IAED,KAAKA,qBAAL,GAA6B,IAA7B;IACA,IAAIqC,QAAQ,GAAG,CAAf;IACA,IAAIC,KAAK,GAAGX,KAAK,CAACW,KAAlB;;IAEA,IAAIC,UAAU,GAAG,KAAKrC,gBAAL,CAAsBoC,KAAtB,CAAjB;;IAEA,OAAOA,KAAK,IAAIX,KAAK,CAACa,IAAf,KAAwB,CAACD,UAAD,IAAe,CAACA,UAAU,CAACE,QAAnD,CAAP,EAAqE;MACnEF,UAAU,GAAG,KAAKrC,gBAAL,CAAsBoC,KAAtB,CAAb;MACAA,KAAK;IACN,CAtC2C,CAsC1C;IACF;;;IAGA,IAAIC,UAAU,IAAID,KAAK,GAAG,CAA1B,EAA6B;MAC3BD,QAAQ,GAAGlC,IAAI,CAACuC,GAAL,CAASR,aAAT,EAAwB/B,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAYJ,UAAU,CAACP,MAAX,GAAoBA,MAAhC,CAAxB,CAAX;IACD;;IAED,IAAIY,WAAW,GAAG,CAAlB;IACA,IAAIJ,IAAI,GAAGb,KAAK,CAACa,IAAjB;;IAEA,IAAIK,SAAS,GAAG,KAAK3C,gBAAL,CAAsBsC,IAAtB,CAAhB;;IAEA,OAAOA,IAAI,IAAIb,KAAK,CAACW,KAAd,KAAwB,CAACO,SAAD,IAAc,CAACA,SAAS,CAACJ,QAAjD,CAAP,EAAmE;MACjEI,SAAS,GAAG,KAAK3C,gBAAL,CAAsBsC,IAAtB,CAAZ;MACAA,IAAI;IACL,CAtD2C,CAsD1C;IACF;;;IAGA,IAAIK,SAAS,IAAIL,IAAI,GAAGd,KAAK,CAACG,YAAN,CAAmBH,KAAK,CAACI,IAAzB,IAAiC,CAAzD,EAA4D;MAC1D,IAAIgB,UAAU,GAAGD,SAAS,CAACb,MAAV,GAAmBa,SAAS,CAACE,MAA9C;MACAH,WAAW,GAAGzC,IAAI,CAACuC,GAAL,CAASR,aAAT,EAAwB/B,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAYX,MAAM,GAAGE,aAAT,GAAyBY,UAArC,CAAxB,CAAd;IACD;;IAED,IAAIxE,YAAY,GAAG6B,IAAI,CAACoB,KAAL,CAAWc,QAAQ,GAAGO,WAAtB,CAAnB;IACA,IAAII,SAAS,GAAG1E,YAAY,GAAG4D,aAA/B;;IAEA,IAAIc,SAAS,GAAG,CAAhB,EAAmB;MACjB,KAAKnD,kBAAL,GAA0Ba,GAA1B;MACA,KAAKX,KAAL,CAAW5B,mBAAX,IAAkCiE,WAAlC;MACA,KAAKrC,KAAL,CAAW9B,eAAX;MACA,KAAK8B,KAAL,CAAWzB,YAAX,IAA2BA,YAA3B;;MAEA,IAAI0E,SAAS,GAAG,GAAhB,EAAqB;QACnB,KAAKhD,qBAAL,GAA6BU,GAA7B;QACA,KAAKX,KAAL,CAAW3B,kBAAX;MACD;IACF,CAVD,MAUO,IAAIgE,WAAW,GAAG,IAAd,IAAsBjC,IAAI,CAACgC,GAAL,CAASJ,OAAT,IAAoB,CAA9C,EAAiD;MACtD,KAAKpB,kBAAL;IACD;;IAED,OAAOqC,SAAP;EACD;;EAEDC,OAAO,GAAG;IACR,OAAO,KAAKnD,QAAZ;EACD;;EAEDO,UAAU,GAAG;IACX,KAAKR,kBAAL,GAA0B,IAA1B;IACA,KAAKE,KAAL,GAAa,IAAIhC,IAAJ,EAAb;IACA,KAAKiC,qBAAL,GAA6B,IAA7B;IACA,KAAKC,iBAAL,GAAyB,IAAzB;EACD;;AAzLkB;;AA6LrB,eAAelB,cAAf"},"metadata":{},"sourceType":"module"}