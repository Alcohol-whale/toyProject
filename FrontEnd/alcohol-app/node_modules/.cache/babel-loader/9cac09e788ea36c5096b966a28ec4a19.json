{"ast":null,"code":"var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function (input) {\n  var tokens = [];\n  var value = input;\n  var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{\n    nodes: tokens\n  }];\n  var balanced = 0;\n  var parent;\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n\n      token = value.slice(pos, next);\n      prev = tokens[tokens.length - 1];\n\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === \"function\" && parent.value !== \"calc\")) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next; // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n\n        if (~next) {\n          escapePos = next;\n\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos); // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n      pos = next + 2;\n      code = value.charCodeAt(pos); // Operation within calc\n    } else if ((code === slash || code === star) && parent && parent.type === \"function\" && parent.value === \"calc\") {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos); // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n      pos += 1;\n      code = value.charCodeAt(pos); // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n\n          if (~next) {\n            escapePos = next;\n\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape); // Whitespaces before closed\n\n\n        whitespacePos = next;\n\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [{\n              type: \"word\",\n              sourceIndex: pos,\n              sourceEndIndex: whitespacePos + 1,\n              value: value.slice(pos, whitespacePos + 1)\n            }];\n          } else {\n            token.nodes = [];\n          }\n\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n\n      name = \"\"; // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes; // Words\n    } else {\n      next = pos;\n\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === \"function\" && parent.value === \"calc\" || code === slash && parent.type === \"function\" && parent.value === \"calc\" || code === closeParentheses && balanced));\n\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};","map":{"version":3,"names":["openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","uLower","uUpper","plus","isUnicodeRange","module","exports","input","tokens","value","next","quote","prev","token","escape","escapePos","whitespacePos","parenthesesOpenPos","pos","code","max","length","stack","nodes","balanced","parent","name","before","after","slice","type","sourceEndIndex","push","sourceIndex","indexOf","unclosed","pop","test"],"sources":["/Users/ilkwon_choi/Downloads/Alcohol/FrontEnd/alcohol-app/node_modules/postcss-value-parser/lib/parse.js"],"sourcesContent":["var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}