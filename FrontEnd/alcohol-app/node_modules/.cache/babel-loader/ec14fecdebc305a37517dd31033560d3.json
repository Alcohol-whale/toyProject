{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport _EventSubscription from './_EventSubscription';\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\n\nclass EmitterSubscription extends _EventSubscription {\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(emitter, subscriber, listener, context) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of _EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n\n\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n\n}\n\nexport default EmitterSubscription;","map":{"version":3,"names":["_EventSubscription","EmitterSubscription","constructor","emitter","subscriber","listener","context","remove","removeSubscription"],"sources":["/Users/ilkwon_choi/Downloads/Alcohol/FrontEnd/alcohol-app/node_modules/react-native-web/dist/vendor/react-native/emitter/_EmitterSubscription.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport _EventSubscription from './_EventSubscription';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nclass EmitterSubscription extends _EventSubscription {\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(emitter, subscriber, listener, context) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of _EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n\n\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n\n}\n\nexport default EmitterSubscription;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,kBAAP,MAA+B,sBAA/B;AAEA;AACA;AACA;;AACA,MAAMC,mBAAN,SAAkCD,kBAAlC,CAAqD;EACnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAW,CAACC,OAAD,EAAUC,UAAV,EAAsBC,QAAtB,EAAgCC,OAAhC,EAAyC;IAClD,MAAMF,UAAN;IACA,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKE,QAAL,GAAgBA,QAAhB;IACA,KAAKC,OAAL,GAAeA,OAAf;EACD;EACD;AACF;AACA;AACA;AACA;AACA;;;EAGEC,MAAM,GAAG;IACP,KAAKJ,OAAL,CAAaK,kBAAb,CAAgC,IAAhC;EACD;;AA3BkD;;AA+BrD,eAAeP,mBAAf"},"metadata":{},"sourceType":"module"}