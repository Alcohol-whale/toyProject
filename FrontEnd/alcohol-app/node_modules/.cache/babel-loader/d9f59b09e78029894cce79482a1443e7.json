{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nclass Batchinator {\n  constructor(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  }\n\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: () => clearTimeout(timeoutHandle)\n    };\n  }\n\n}\n\nexport default Batchinator;","map":{"version":3,"names":["InteractionManager","Batchinator","constructor","callback","delayMS","_delay","_callback","dispose","options","abort","_taskHandle","cancel","schedule","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout"],"sources":["/Users/ilkwon_choi/Downloads/Alcohol/FrontEnd/alcohol-app/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nclass Batchinator {\n  constructor(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  }\n\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: () => clearTimeout(timeoutHandle)\n    };\n  }\n\n}\n\nexport default Batchinator;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,kBAAP,MAA+B,qCAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAN,CAAkB;EAChBC,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoB;IAC7B,KAAKC,MAAL,GAAcD,OAAd;IACA,KAAKE,SAAL,GAAiBH,QAAjB;EACD;EACD;AACF;AACA;AACA;AACA;AACA;;;EAGEI,OAAO,CAACC,OAAD,EAAU;IACf,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;MACtBA,OAAO,GAAG;QACRC,KAAK,EAAE;MADC,CAAV;IAGD;;IAED,IAAI,KAAKC,WAAT,EAAsB;MACpB,KAAKA,WAAL,CAAiBC,MAAjB;;MAEA,IAAI,CAACH,OAAO,CAACC,KAAb,EAAoB;QAClB,KAAKH,SAAL;MACD;;MAED,KAAKI,WAAL,GAAmB,IAAnB;IACD;EACF;;EAEDE,QAAQ,GAAG;IACT,IAAI,KAAKF,WAAT,EAAsB;MACpB;IACD;;IAED,IAAIG,aAAa,GAAGC,UAAU,CAAC,MAAM;MACnC,KAAKJ,WAAL,GAAmBV,kBAAkB,CAACe,oBAAnB,CAAwC,MAAM;QAC/D;QACA;QACA,KAAKL,WAAL,GAAmB,IAAnB;;QAEA,KAAKJ,SAAL;MACD,CANkB,CAAnB;IAOD,CAR6B,EAQ3B,KAAKD,MARsB,CAA9B;IASA,KAAKK,WAAL,GAAmB;MACjBC,MAAM,EAAE,MAAMK,YAAY,CAACH,aAAD;IADT,CAAnB;EAGD;;AAhDe;;AAoDlB,eAAeZ,WAAf"},"metadata":{},"sourceType":"module"}