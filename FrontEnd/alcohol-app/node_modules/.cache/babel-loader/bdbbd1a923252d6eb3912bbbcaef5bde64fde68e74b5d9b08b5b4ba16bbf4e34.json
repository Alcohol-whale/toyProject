{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _createForOfIteratorHelperLoose from \"@babel/runtime/helpers/createForOfIteratorHelperLoose\";\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  constructor(config) {\n    if (config === void 0) {\n      config = {\n        viewAreaCoveragePercentThreshold: 0\n      };\n    }\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n\n  computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange // Optional optimization to reduce the scan size\n  ) {\n    var _this$_config = this._config,\n      itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n    var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n    invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n    var viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    var firstVisible = -1;\n    var _ref = renderRange || {\n        first: 0,\n        last: itemCount - 1\n      },\n      first = _ref.first,\n      last = _ref.last;\n    if (last >= itemCount) {\n      console.warn('Invalid render range computing viewability ' + JSON.stringify({\n        renderRange,\n        itemCount\n      }));\n      return [];\n    }\n    for (var idx = first; idx <= last; idx++) {\n      var metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      var top = metrics.offset - scrollOffset;\n      var bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n\n  onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange // Optional optimization to reduce the scan size\n  ) {\n    if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {\n      return;\n    }\n    var viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n    }\n    if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      var handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n    }\n  }\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n  _onUpdateSync(\n  // $FlowFixMe\n  viewableIndicesToCheck,\n  // $FlowFixMe\n  onViewableItemsChanged,\n  // $FlowFixMe\n  createViewToken) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));\n    var prevItems = this._viewableItems;\n    var nextItems = new Map(viewableIndicesToCheck.map(ii => {\n      var viewable = createViewToken(ii, true);\n      return [viewable.key, viewable];\n    }));\n    var changed = [];\n    for (var _iterator = _createForOfIteratorHelperLoose(nextItems), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n        key = _step$value[0],\n        viewable = _step$value[1];\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (var _iterator2 = _createForOfIteratorHelperLoose(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n      var _step2$value = _step2.value,\n        _key = _step2$value[0],\n        _viewable = _step2$value[1];\n      if (!nextItems.has(_key)) {\n        changed.push(_objectSpread(_objectSpread({}, _viewable), {}, {\n          isViewable: false\n        }));\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config\n      });\n    }\n  }\n}\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\nexport default ViewabilityHelper;","map":{"version":3,"names":["_objectSpread","_createForOfIteratorHelperLoose","invariant","ViewabilityHelper","constructor","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","dispose","forEach","clearTimeout","computeViewableItems","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","_this$_config","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","first","last","console","warn","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","onUpdate","createViewToken","onViewableItemsChanged","waitForInteraction","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","resetViewableIndices","recordInteraction","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","_iterator","_step","done","_step$value","value","has","_iterator2","_step2","_step2$value","_key","_viewable","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max"],"sources":["C:/Users/dlfrn/Downloads/myToyProj/toyProject/FrontEnd/alcohol-app/node_modules/react-native-web/dist/vendor/react-native/ViewabilityHelper/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _createForOfIteratorHelperLoose from \"@babel/runtime/helpers/createForOfIteratorHelperLoose\";\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  constructor(config) {\n    if (config === void 0) {\n      config = {\n        viewAreaCoveragePercentThreshold: 0\n      };\n    }\n\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n\n\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n\n\n  computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange // Optional optimization to reduce the scan size\n  ) {\n    var _this$_config = this._config,\n        itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n        viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n    var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n    invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n    var viewableIndices = [];\n\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n\n    var firstVisible = -1;\n\n    var _ref = renderRange || {\n      first: 0,\n      last: itemCount - 1\n    },\n        first = _ref.first,\n        last = _ref.last;\n\n    if (last >= itemCount) {\n      console.warn('Invalid render range computing viewability ' + JSON.stringify({\n        renderRange,\n        itemCount\n      }));\n      return [];\n    }\n\n    for (var idx = first; idx <= last; idx++) {\n      var metrics = getFrameMetrics(idx);\n\n      if (!metrics) {\n        continue;\n      }\n\n      var top = metrics.offset - scrollOffset;\n      var bottom = top + metrics.length;\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n\n        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n\n    return viewableIndices;\n  }\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n\n\n  onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange // Optional optimization to reduce the scan size\n  ) {\n    if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {\n      return;\n    }\n\n    var viewableIndices = [];\n\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n    }\n\n    if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n\n    this._viewableIndices = viewableIndices;\n\n    if (this._config.minimumViewTime) {\n      var handle = setTimeout(() => {\n        this._timers.delete(handle);\n\n        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n      }, this._config.minimumViewTime);\n\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n    }\n  }\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n\n\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n\n\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync( // $FlowFixMe\n  viewableIndicesToCheck, // $FlowFixMe\n  onViewableItemsChanged, // $FlowFixMe\n  createViewToken) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));\n    var prevItems = this._viewableItems;\n    var nextItems = new Map(viewableIndicesToCheck.map(ii => {\n      var viewable = createViewToken(ii, true);\n      return [viewable.key, viewable];\n    }));\n    var changed = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(nextItems), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          key = _step$value[0],\n          viewable = _step$value[1];\n\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n      var _step2$value = _step2.value,\n          _key = _step2$value[0],\n          _viewable = _step2$value[1];\n\n      if (!nextItems.has(_key)) {\n        changed.push(_objectSpread(_objectSpread({}, _viewable), {}, {\n          isViewable: false\n        }));\n      }\n    }\n\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config\n      });\n    }\n  }\n\n}\n\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nexport default ViewabilityHelper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}