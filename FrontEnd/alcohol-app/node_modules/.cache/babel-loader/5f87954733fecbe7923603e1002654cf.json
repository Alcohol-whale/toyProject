{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar rtlScripts = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nvar rtlLangs = new Set(['ae', // Avestan\n'ar', // Arabic\n'arc', // Aramaic\n'bcc', // Southern Balochi\n'bqi', // Bakthiari\n'ckb', // Sorani\n'dv', // Dhivehi\n'fa', 'far', // Persian\n'glk', // Gilaki\n'he', 'iw', // Hebrew\n'khw', // Khowar\n'ks', // Kashmiri\n'ku', // Kurdish\n'mzn', // Mazanderani\n'nqo', // N'Ko\n'pnb', // Western Punjabi\n'ps', // Pashto\n'sd', // Sindhi\n'ug', // Uyghur\n'ur', // Urdu\n'yi' // Yiddish\n]);\nvar cache = new Map();\n/**\n * Determine the writing direction of a locale\n */\n\nexport function isLocaleRTL(locale) {\n  var cachedRTL = cache.get(locale);\n\n  if (cachedRTL) {\n    return cachedRTL;\n  }\n\n  var isRTL = false; // $FlowFixMe\n\n  if (Intl.Locale) {\n    // $FlowFixMe\n    var script = new Intl.Locale(locale).maximize().script;\n    isRTL = rtlScripts.has(script);\n  } else {\n    // Fallback to inferring from language\n    var lang = locale.split('-')[0];\n    isRTL = rtlLangs.has(lang);\n  }\n\n  cache.set(locale, isRTL);\n  return isRTL;\n}","map":{"version":3,"names":["rtlScripts","Set","rtlLangs","cache","Map","isLocaleRTL","locale","cachedRTL","get","isRTL","Intl","Locale","script","maximize","has","lang","split","set"],"sources":["/Users/ilkwon_choi/Downloads/Alcohol/FrontEnd/alcohol-app/node_modules/react-native-web/dist/modules/useLocale/isLocaleRTL.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar rtlScripts = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nvar rtlLangs = new Set(['ae', // Avestan\n'ar', // Arabic\n'arc', // Aramaic\n'bcc', // Southern Balochi\n'bqi', // Bakthiari\n'ckb', // Sorani\n'dv', // Dhivehi\n'fa', 'far', // Persian\n'glk', // Gilaki\n'he', 'iw', // Hebrew\n'khw', // Khowar\n'ks', // Kashmiri\n'ku', // Kurdish\n'mzn', // Mazanderani\n'nqo', // N'Ko\n'pnb', // Western Punjabi\n'ps', // Pashto\n'sd', // Sindhi\n'ug', // Uyghur\n'ur', // Urdu\n'yi' // Yiddish\n]);\nvar cache = new Map();\n/**\n * Determine the writing direction of a locale\n */\n\nexport function isLocaleRTL(locale) {\n  var cachedRTL = cache.get(locale);\n\n  if (cachedRTL) {\n    return cachedRTL;\n  }\n\n  var isRTL = false; // $FlowFixMe\n\n  if (Intl.Locale) {\n    // $FlowFixMe\n    var script = new Intl.Locale(locale).maximize().script;\n    isRTL = rtlScripts.has(script);\n  } else {\n    // Fallback to inferring from language\n    var lang = locale.split('-')[0];\n    isRTL = rtlLangs.has(lang);\n  }\n\n  cache.set(locale, isRTL);\n  return isRTL;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,MAAjE,EAAyE,MAAzE,CAAR,CAAjB;AACA,IAAIC,QAAQ,GAAG,IAAID,GAAJ,CAAQ,CAAC,IAAD,EAAO;AAC9B,IADuB,EACjB;AACN,KAFuB,EAEhB;AACP,KAHuB,EAGhB;AACP,KAJuB,EAIhB;AACP,KALuB,EAKhB;AACP,IANuB,EAMjB;AACN,IAPuB,EAOjB,KAPiB,EAOV;AACb,KARuB,EAQhB;AACP,IATuB,EASjB,IATiB,EASX;AACZ,KAVuB,EAUhB;AACP,IAXuB,EAWjB;AACN,IAZuB,EAYjB;AACN,KAbuB,EAahB;AACP,KAduB,EAchB;AACP,KAfuB,EAehB;AACP,IAhBuB,EAgBjB;AACN,IAjBuB,EAiBjB;AACN,IAlBuB,EAkBjB;AACN,IAnBuB,EAmBjB;AACN,IApBuB,CAoBlB;AApBkB,CAAR,CAAf;AAsBA,IAAIE,KAAK,GAAG,IAAIC,GAAJ,EAAZ;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;EAClC,IAAIC,SAAS,GAAGJ,KAAK,CAACK,GAAN,CAAUF,MAAV,CAAhB;;EAEA,IAAIC,SAAJ,EAAe;IACb,OAAOA,SAAP;EACD;;EAED,IAAIE,KAAK,GAAG,KAAZ,CAPkC,CAOf;;EAEnB,IAAIC,IAAI,CAACC,MAAT,EAAiB;IACf;IACA,IAAIC,MAAM,GAAG,IAAIF,IAAI,CAACC,MAAT,CAAgBL,MAAhB,EAAwBO,QAAxB,GAAmCD,MAAhD;IACAH,KAAK,GAAGT,UAAU,CAACc,GAAX,CAAeF,MAAf,CAAR;EACD,CAJD,MAIO;IACL;IACA,IAAIG,IAAI,GAAGT,MAAM,CAACU,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAX;IACAP,KAAK,GAAGP,QAAQ,CAACY,GAAT,CAAaC,IAAb,CAAR;EACD;;EAEDZ,KAAK,CAACc,GAAN,CAAUX,MAAV,EAAkBG,KAAlB;EACA,OAAOA,KAAP;AACD"},"metadata":{},"sourceType":"module"}