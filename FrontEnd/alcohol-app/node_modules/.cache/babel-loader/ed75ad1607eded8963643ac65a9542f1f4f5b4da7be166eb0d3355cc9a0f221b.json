{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedValue from '../nodes/AnimatedValue';\nimport AnimatedValueXY from '../nodes/AnimatedValueXY';\nimport AnimatedInterpolation from '../nodes/AnimatedInterpolation';\nimport Animation from './Animation';\nimport SpringConfig from '../SpringConfig';\nimport invariant from 'fbjs/lib/invariant';\nimport { shouldUseNativeDriver } from '../NativeAnimatedHelper';\nclass SpringAnimation extends Animation {\n  constructor(config) {\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n    super();\n    this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;\n    this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 0.001;\n    this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 0.001;\n    this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;\n    this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;\n    this._toValue = config.toValue;\n    this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    this._useNativeDriver = shouldUseNativeDriver(config);\n    this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !this._useNativeDriver;\n    this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;\n      this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;\n      this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed;\n\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      var _config$tension, _config$friction;\n\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);\n      this._stiffness = _springConfig.stiffness;\n      this._damping = _springConfig.damping;\n      this._mass = 1;\n    }\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n  __getNativeAnimationConfig() {\n    var _this$_initialVelocit;\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  }\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity; // Set the initial velocity to the last velocity\n\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n    var start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    }; //  If this._delay is more than 0, we start after the timeout.\n\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n  getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  }\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n\n  onUpdate() {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    var MAX_STEPS = 64;\n    var now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n    var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n\n    var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n\n    var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n    if (zeta < 1) {\n      // Under damped\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t)); // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      var _envelope = Math.exp(-omega0 * t);\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n    this._onUpdate(position);\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    } // Conditions for stopping the spring animation\n\n    var isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    var isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n      this.__debouncedOnEnd({\n        finished: true\n      });\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n  stop() {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  }\n}\nexport default SpringAnimation;","map":{"version":3,"names":["AnimatedValue","AnimatedValueXY","AnimatedInterpolation","Animation","SpringConfig","invariant","shouldUseNativeDriver","SpringAnimation","constructor","config","_config$overshootClam","_config$restDisplacem","_config$restSpeedThre","_config$velocity","_config$velocity2","_config$delay","_config$isInteraction","_config$iterations","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","_useNativeDriver","__isInteraction","isInteraction","__iterations","iterations","stiffness","undefined","damping","mass","_config$stiffness","_config$damping","_config$mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","_config$bounciness","_config$speed","springConfig","fromBouncinessAndSpeed","_config$tension","_config$friction","_springConfig","fromOrigamiTensionAndFriction","__getNativeAnimationConfig","_this$_initialVelocit","type","initialVelocity","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__active","_startPosition","_lastPosition","_onUpdate","__onEnd","_lastTime","Date","now","_frameTime","internalState","getInternalState","lastPosition","lastVelocity","lastTime","__startNativeAnimation","_timeout","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","_envelope","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","_animationFrame","requestAnimationFrame","bind","stop","clearTimeout","global","cancelAnimationFrame"],"sources":["C:/Users/dlfrn/Downloads/myToyProj/toyProject/FrontEnd/alcohol-app/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/SpringAnimation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedValue from '../nodes/AnimatedValue';\nimport AnimatedValueXY from '../nodes/AnimatedValueXY';\nimport AnimatedInterpolation from '../nodes/AnimatedInterpolation';\nimport Animation from './Animation';\nimport SpringConfig from '../SpringConfig';\nimport invariant from 'fbjs/lib/invariant';\nimport { shouldUseNativeDriver } from '../NativeAnimatedHelper';\n\nclass SpringAnimation extends Animation {\n  constructor(config) {\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n\n    super();\n    this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;\n    this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 0.001;\n    this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 0.001;\n    this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;\n    this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;\n    this._toValue = config.toValue;\n    this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    this._useNativeDriver = shouldUseNativeDriver(config);\n    this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !this._useNativeDriver;\n    this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;\n      this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;\n      this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed;\n\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      var _config$tension, _config$friction;\n\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);\n\n      this._stiffness = _springConfig.stiffness;\n      this._damping = _springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig() {\n    var _this$_initialVelocit;\n\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  }\n\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity; // Set the initial velocity to the last velocity\n\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    var start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    }; //  If this._delay is more than 0, we start after the timeout.\n\n\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  }\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n\n\n  onUpdate() {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    var MAX_STEPS = 64;\n    var now = Date.now();\n\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n    var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n\n    var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n\n    var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n\n    if (zeta < 1) {\n      // Under damped\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t)); // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      var _envelope = Math.exp(-omega0 * t);\n\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    } // Conditions for stopping the spring animation\n\n\n    var isOvershooting = false;\n\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n\n    var isDisplacement = true;\n\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({\n        finished: true\n      });\n\n      return;\n    }\n\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop() {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  }\n\n}\n\nexport default SpringAnimation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}